fill = ordered(seq_along(var)%%2 + 1))) +
# color of the rectangles
scale_fill_manual(values = c("#FFFFFF33","grey95"), guide = "none") +
# show confidence intervals
geom_errorbar(aes(ymin = exp(conf.low), ymax = exp(conf.high)),size = line.size, width =0) +
# plot mean points
geom_point(pch = 16, size = point.size, color = "#009AA6") +
# add no effect line at 1
geom_hline(yintercept = 1, linetype = 2) +
coord_flip(ylim = exp(rangeplot)) +
ggtitle(main) +
scale_y_log10(name = "", labels = sprintf("%g", breaks), expand = c(0.02, 0.02), breaks = breaks) +
theme_light() +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none",
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5)) +
xlab("") +
annotate(geom = "text", x = x_annotate,
y = exp(y_variable), label = toShowExpClean$var, fontface = "bold",
hjust = 0, size = annot_size_mm) +
annotate(geom = "text", x = x_annotate, y = exp(y_nlevel), hjust = 0, label = toShowExpClean$levelN,
# vjust = -0.1,
size = annot_size_mm) +
# Annotate No. of patients
# annotate(geom = "text", x = x_annotate, y = exp(y_nlevel), label = toShowExpClean$N,
#         fontface = "italic", hjust = 0, vjust = ifelse(toShowExpClean$level == "", 0.5, 1.1), size = annot_size_mm) +
# Annotate mean HR
annotate(geom = "text",  x = x_annotate, y = exp(y_cistring), label = toShowExpClean$estimateCI,
size = annot_size_mm) +
# Annotate ci
# annotate(geom = "text",   x = x_annotate, y = exp(y_cistring), label = toShowExpClean$ci,
#          size = annot_size_mm, vjust = 1.1, fontface = "italic") +
# Annotate stars
annotate(geom = "text", x = x_annotate, y = exp(y_stars),
label = toShowExpClean$stars, size = annot_size_mm,
hjust = -0.2, fontface = "italic") +
annotate(geom = "text", x = legend_x, y = exp(y_variable-legend_y),
label = paste0("# Events: ",   gmodel$nevent, "; Global p-value (Log-Rank): ",
format.pval(gmodel$p.value.log, eps = ".001"),
" \nAIC: ", round(gmodel$AIC, 2), "; Concordance Index: ",
round(gmodel$concordance, 2)), size = annot_size_mm,
hjust = 0, vjust = 1.2, fontface = "italic")
gt <-suppressWarnings(ggplot_gtable(ggplot_build(p)))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
ggpubr::as_ggplot(gt)
}
vec <- "2015-04"
x <- "2015-04"
stringr::str_detect(x, "^\\d{4}$")
stringr::str_detect(x, "^\\d{4}-\\d{2}")
x <- "2015-04-12"
stringr::str_detect(x, "^\\d{4}-\\d{2}")
convert_date <- function(x){
x <- ifelse(stringr::str_detect(x, "^\\d{4}$"), paste(x, "-06", sep = ""), x)
x <- ifelse(stringr::str_detect(x, "^\\d{4}-\\d{2}$"), paste(x, "-15", sep = ""), x)
ymd <- lubridate::ymd(x)
dmy <- lubridate::dmy(x)
dmy[is.na(dmy)] <- ymd[is.na(dmy)]
return(dmy)
}
?sub
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "ekbSeq"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
# install package
install(package)
df <- survival::lung
df
ate_weights(data = df, vars = c("age", "ph.ecog", "ph.karno"), prop.var = "sex")
#' @param round rounds the results to the specified number of decimal places (default 1)
#' @param weights character variable specifying the name of the weights column. Weights (numerical vector) have to be added to the original dataframe in order to be applied correctly.
#' @param conf.type Method to calculate confidence intervals. Log-log method is the default in SAS and was therefore set as the default here too.
#' @export
#' @examples
#' # example survival calculation with the lung dataset
#' df <- survival::lung
#' add_median_survival(data = df, time = "time", status = "status", var = "ph.ecog")
#' # calculate median survival with inverse propensity score weighting for sex
#'
df$sex <- factor(df$sex)
ate_weights(data = df, vars = c("age", "ph.ecog", "ph.karno"), prop.var = "sex")
is.na(df$ph.ecog)
is.na(df$ph.karno)
df$sex <- factor(df$sex)
df$ph.ecog <- ifelse(is.na(df$ph.ecog), "Missing", df$ph.ecog)
df$ph.karno <- ifelse(is.na(df$ph.karno), "Missing", df$ph.karno)
ate_weights(data = df, vars = c("age", "ph.ecog", "ph.karno"), prop.var = "sex")
df$weights.ate <- ate_weights(data = df, vars = c("age", "ph.ecog", "ph.karno"), prop.var = "sex")
add_median_survival(data = df, time = "time", status = "status", var = "ph.ecog", weights = "weights.ate")
add_median_survival(data = df, time = "time", status = "status", var = "ph.ecog")
df
add_median_survival(data = df, time = "time", status = "status", var = "ph.ecog", weights = weights.ate)
add_median_survival(data = df, time = "time", status = "status", var = "ph.ecog", weights = "weights.ate")
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
data <- df
time <- "time"
status <- "status"
var <- "sex"
weights <- "weights.ate"
round <- 1
statistics <- TRUE
conf.type <- "log-log"
data[[weights]]
weights <-  data[[weights]]
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
library(survminer)
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
library(survival)
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
fit
surv_med <- surv_median(fit)
if(!is.null(weights)){
dat_logrank <- data[!is.na(data[[time]])]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
data[!is.na(data[[time]])]
data[[time]]
df <- data.table(df)
library(data.table)
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
add_median_survival <- function(data, time, status, var, round = 1, statistics = TRUE, weights = NULL, conf.type = "log-log"){
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
dat_logrank <- data[!is.na(data[[time]])]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
pval <- ifelse(pval < 0.0001, "< 0.0001", round(pval,4))
tbl <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
fit <- surv_fit(Surv(eval(parse(text = time)), eval(parse(text = status))) ~ 1, data = data, weights = weights)
surv_med <- surv_median(fit)
tmp <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
if (statistics == TRUE){
res <-rbind(tbl, tmp, pval)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total", "pvalue")
} else {
res <-rbind(tbl, tmp)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total")
}
colnames(res) <- "Median (95% CI)"
return(res)
}
df
df <- setDT(df)
df
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
data <- df
weights <-  data[[weights]]
data
weights
weights <- "weights.ate"
weights <-  data[[weights]]
weights
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
dat_logrank <- data[!is.na(data[[time]])]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
dat_logrank <- data[!is.na(data[[time]])]
data[[time]]
!is.na(data[[time]])
data[!is.na(data[[time]])]
data[!is.na(data[[time]]),]
data[which(!is.na(data[[time]])),]
which(!is.na(data[[time]]))
df <- survival::lung
df$sex <- factor(df$sex)
df$ph.ecog <- ifelse(is.na(df$ph.ecog), "Missing", df$ph.ecog)
df$ph.karno <- ifelse(is.na(df$ph.karno), "Missing", df$ph.karno)
df$weights.ate <- ate_weights(data = df, vars = c("age", "ph.ecog", "ph.karno"), prop.var = "sex")
data <- df
weights <- "weights.ate"
data[[weights]]
data[!is.na(data[[time]]),]
data2 <- setDT(data)
data2[!is.na(data2[[time]]),]
data2[[time]]
which(!is.na(data2[[time]]))
data2[1,]
ind <- which(!is.na(data2[[time]]))
data2[ind,]
ind <- which(!is.na(data[[time]]))
ind
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
dat_logrank
dat_logrank[[time]]
dat_logrank[[status]]
dat_logrank[[var]]
levels(dat_logrank[[var]])[1]
ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1)
logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)
dat_logrank[[status]]
logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
df$status <- factor(df$status)
data <- df
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
ifelse(df$status == 2, 1, 0)
df$status <- ifelse(df$status == 2, 1, 0)
data <- df
weights <- "weights.ate"
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
pval
add_median_survival <- function(data, time, status, var, round = 1, statistics = TRUE, weights = NULL, conf.type = "log-log"){
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
pval <- ifelse(pval < 0.0001, "< 0.0001", round(pval,4))
tbl <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
fit <- surv_fit(Surv(eval(parse(text = time)), eval(parse(text = status))) ~ 1, data = data, weights = weights)
surv_med <- surv_median(fit)
tmp <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
if (statistics == TRUE){
res <-rbind(tbl, tmp, pval)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total", "pvalue")
} else {
res <-rbind(tbl, tmp)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total")
}
colnames(res) <- "Median (95% CI)"
return(res)
}
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
weights <- "weights.ate"
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
df$status
time <- "time"
status <- "status"
var <- "sex"
weights <- "weights.ate"
round <- 1
statistics <- TRUE
conf.type <- "log-log"
data <- df
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
pval <- ifelse(pval < 0.0001, "< 0.0001", round(pval,4))
tbl <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
fit <- surv_fit(Surv(eval(parse(text = time)), eval(parse(text = status))) ~ 1, data = data, weights = weights)
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~ 1", sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
tmp <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
if (statistics == TRUE){
res <-rbind(tbl, tmp, pval)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total", "pvalue")
} else {
res <-rbind(tbl, tmp)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total")
}
colnames(res) <- "Median (95% CI)"
return(res)
add_median_survival <- function(data, time, status, var, round = 1, statistics = TRUE, weights = NULL, conf.type = "log-log"){
if(!is.null(weights)){
weights <-  data[[weights]]
}
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~",var, sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
if(!is.null(weights)){
ind <- which(!is.na(data[[time]]))
dat_logrank <- data[ind,]
pval <- logrank_IPSW_RISCA(dat_logrank[[time]], dat_logrank[[status]], ifelse(dat_logrank[[var]] == levels(dat_logrank[[var]])[1], 0, 1), weights)$p.value
} else {
pval <- surv_pvalue(fit)$pval
}
pval <- ifelse(pval < 0.0001, "< 0.0001", round(pval,4))
tbl <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
surv_formula <- as.formula(paste("Surv(", time, ",", status,")~ 1", sep = ""))
fit <- surv_fit(surv_formula, data = data, weights = weights, conf.type = conf.type)
surv_med <- surv_median(fit)
tmp <- data.frame(sapply(1:length(surv_med$median),function(x){
paste(round(surv_med$median[x],round), " (", round(surv_med$lower[x],round),"-", round(surv_med$upper[x],round),")", sep = "")
}))
if (statistics == TRUE){
res <-rbind(tbl, tmp, pval)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total", "pvalue")
} else {
res <-rbind(tbl, tmp)
rownames(res) <- c(sort(as.character(unique(data[[var]]))), "Total")
}
colnames(res) <- "Median (95% CI)"
return(res)
}
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = "weights.ate")
add_median_survival(data = df, time = "time", status = "status", var = "sex", weights = NULL)
survival::lung
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
add_median_survival <- NULL
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
# install package
install(package)
