barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.02)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.06)
png("test.png", units="in", width=11, height=4, res=1200)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.06)
dev.off()
png("test.png", units="in", width=11, height=4, res=1200)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07)
dev.off()
theme_eumelareg_barplot <- function(textsize=14){
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
legend.position = "none",
axis.line.y.left = element_line(),
axis.line.x.bottom = element_line(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(face = "bold", size = textsize),
axis.ticks.length.y = unit(.25, "cm"),
axis.title.y = element_text(face = "bold", size = textsize),
axis.text.y = element_text(size = textsize))
}
theme_eumelareg_surv_plot <- function(textsize =14){
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.y.left = element_line(),
axis.line.x.bottom = element_line(),
axis.text = element_text(size = textsize),
axis.title = element_text(face = "bold", size = textsize))
}
png("test.png", units="in", width=11, height=4, res=1200)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07)
dev.off()
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Test",scale = 5){
n <- aggregate(as.formula(paste(y,"~",x)), data = test, FUN = length)
n$y.pos <- test[test[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
ggplot(test, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = lim/35)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
scale_fill_brewer(palette = brewer.palette) +
ylab(ylab)
}
png("test.png", units="in", width=11, height=4, res=1200)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07)
dev.off()
p <- ggsurvplot(
fit,
xlab = "Time in days",
ylab = "Probability of Overall Survival",
pval = TRUE,
break.y.by = 0.1,
break.time.by = 90,
ggtheme = theme_eumelareg_surv_plot(),
tables.theme = theme_eumelareg_surv_table(),
axes.offset = FALSE,
risk.table = "absolute",
risk.table.y.text = T,
risk.table.title = "No. at Risk",
legend.labs =   c("Male", "Female"),
palette =   c("#E7B800", "#2E9FDF")
)
png("test_surv.png", units="in", width=7, height=5, res=1200)
p
dev.off()
theme_eumelareg_surv_plot <- function(textsize =12){
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.line.y.left = element_line(),
axis.line.x.bottom = element_line(),
axis.text = element_text(size = textsize),
axis.title = element_text(face = "bold", size = textsize))
}
## ..................................................................................................................
## this function defines the style of the table below Kaplan-Meier Plot  #
theme_eumelareg_surv_table <- function(){
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = "none",
panel.border = element_blank(),
title = element_text(face ="bold"),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
}
p <- ggsurvplot(
fit,
xlab = "Time in days",
ylab = "Probability of Overall Survival",
pval = TRUE,
break.y.by = 0.1,
break.time.by = 90,
ggtheme = theme_eumelareg_surv_plot(),
tables.theme = theme_eumelareg_surv_table(),
axes.offset = FALSE,
risk.table = "absolute",
risk.table.y.text = T,
risk.table.title = "No. at Risk",
legend.labs =   c("Male", "Female"),
palette =   c("#E7B800", "#2E9FDF")
)
p
res.cox <- coxph(Surv(time, status) ~ sex + age + ph.ecog, data =  lung)
# Create a forest plot
ggforest(res.cox)
?ggforest
ggforest
install.packages("processx")
install_github("klutometis/roxygen")
library(devtools)
install_github("klutometis/roxygen")
library(devtools)
install_github("klutometis/roxygen")
library(devtools)
install_github("klutometis/roxygen")
library(devtools)
rm(list = ls())
library(devtools)
library(devtools)
install.packages("processx")
library(devtools)
install_github("klutometis/roxygen")
library(roxygen2)
getwd()
setwd("C:/MBender/Arbeit/Github")
create("emR")
setwd("./emR")
document()
rm(list = c("theme_eumelareg_barplot"))
document()
setwd("..")
getwd()
install("emR")
library(emR)
theme_eumelareg_barplot
?theme_eumelareg_barplot
##  - bar.border.size: size of the barplot border
##  - bar.alpha: alpha of the barplot fill argument
##  - bar.width: width of the barplot
##  - errorbar.fun: function used to summarize errorbar
##  - errorbar.width: width of errorbar
##  - errorbar.size: size of errorbar
##  - dotplot.binwidth: binwidth of the dotplot
##  - brewer.palette: palette specification of R color brewer palettes to be used
##  - ylab: label for y-axis
##  - y.breaks: argument to define breaks on y-axis, default is breakFun, which displays the breaks as a multiple of 5
?geom_jitter
##  - bar.border.size: size of the barplot border
##  - bar.alpha: alpha of the barplot fill argument
##  - bar.width: width of the barplot
##  - errorbar.fun: function used to summarize errorbar
##  - errorbar.width: width of errorbar
##  - errorbar.size: size of errorbar
##  - dotplot.binwidth: binwidth of the dotplot
##  - brewer.palette: palette specification of R color brewer palettes to be used
##  - ylab: label for y-axis
##  - y.breaks: argument to define breaks on y-axis, default is breakFun, which displays the breaks as a multiple of 5
?geom_point
##  - bar.border.size: size of the barplot border
##  - bar.alpha: alpha of the barplot fill argument
##  - bar.width: width of the barplot
##  - errorbar.fun: function used to summarize errorbar
##  - errorbar.width: width of errorbar
##  - errorbar.size: size of errorbar
##  - dotplot.binwidth: binwidth of the dotplot
##  - brewer.palette: palette specification of R color brewer palettes to be used
##  - ylab: label for y-axis
##  - y.breaks: argument to define breaks on y-axis, default is breakFun, which displays the breaks as a multiple of 5
?rnorm
setwd("./emR")
document()
rm(list = c("breakFun", "roundUp"))
document()
?breakFun
seq(0,300,43)
x <- seq(0,300,43)
roundUp(x)
document()
?roundUp
?breakFun
document()
?roundUp
?breakFun
document()
document()
?roundUp
?breakFun
document()
?breakFun
document()
?roundUp
?breakFun
?roundUp
document()
?roundUp
?breakFun
document()
?roundUp
?breakFun
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black")
library(ggplot2)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
document()
document()
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
mpg$hwy
y <- mpg$hwy
breakFun (y)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
breakFun <- function(y){
if (min(y) < 0){
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10))
} else {
seq(0, ceiling(max(y)), by = roundUp(max(y)/10))
}
}
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(0,40),breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(0,40),breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(0,40))
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(-10,40))
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(-10,100))
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(-10,100), breaks = breakFun)
breakFun
document()
rm(list = c("breakFun"))
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(limits = c(-10,100), breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
document()
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
y$hwy
y<- mpg$hwy
y
min(y)
min(y) < 0
document()
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
rm(list = "y")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
document()
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
breakFun <- function(y){
ifelse(min(y) < 0,
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),
seq(0, ceiling(max(y)), by = roundUp(max(y)/10)))
}
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
y <- mpg$hwy
breakFun(y)
ifelse(min(y) < 0,
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),
seq(0, ceiling(max(y)), by = roundUp(max(y)/10)))
min(y) < 0
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10))
seq(0, ceiling(max(y)), by = roundUp(max(y)/10))
ifelse(min(y) < 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)), seq(0, ceiling(max(y)), by = roundUp(max(y)/10)))
ifelse(min(y) < 0, "a","B")
ifelse(min(y) < 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B")
ifelse(min(y > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B")
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10))
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10))
ifelse(min(y > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B")
ifelse(min(y > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B"))
ifelse(min(y > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B"))
?ifelse
ifelse(min(y) > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B")
min(y) > 0
seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10))
ifelse(min(y) > 0, seq(floor(min(y)), ceiling(max(y)), by = roundUp(max(y)/10)),"B")
document()
document()
rm(list = c("breakFun"))
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun2)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun3)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun2)
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = seq(0,-20,5))
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = seq(0,-20,-5))
document()
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = seq(0,-20,-5))
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun2)
breakFun2 <- function(y) seq(ceiling(max(y)), floor(min(y)), by = -roundUp(max(y)/10))
document()
rm(list = c("breakFun2"))
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun2)
breakFun2(y)
breakFun2(-y)
-y
seq(max(-y), min(-y))
seq(max(-y), min(-y), by = -5)
seq(ceiling(max(y)), floor(min(y)), by = -roundUp(max(y)/10))
y <- -y
y
seq(ceiling(max(y)), floor(min(y)), by = roundUp(max(y)/10))
ceiling(max(y))
floor(min(y))
roundUp(max(y)/10)
max(y)/10
document()
document()
breakFun2(y)
y
document()
breakFun2(y)
document()
ggplot(mpg, aes(class, -hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun3)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun3)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun2)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
breakFun3(y)
breakFun3(-y)
rm(list = "y")
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun)
ggplot(mpg, aes(class, hwy)) +
geom_bar(stat = "summary", fun = "mean", color = "black") +
scale_y_continuous(breaks = breakFun3)
?breakFun3
breakFun3
document()
?roundUp
?breakFun
document()
?breakFun
document()
?breakFun
?scale_y_continuous
document()
?roundUp
?breakFun
document()
?breakFun
library(ggplot2)
document()
?breakFun
View(summary)
document()
?roundUp
?breakFun
document()
?breakFun
document()
document()
?breakFun
document()
?breakFun
document()
?breakFun
document()
?breakFun
document()
?breakFun
document()
?breakFun
document()
?breakFun
?breakFun2
document()
?breakFun2
document()
?breakFun
?emR
emR
?library(emR)
?require
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Test",scale = 5, dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
ggplot(test, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
scale_fill_brewer(palette = brewer.palette) +
ylab(ylab)
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = "Blues")
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Value",scale = 5, dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
ggplot(test, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
scale_fill_brewer(palette = brewer.palette) +
ylab(ylab)
}
?geom_bar
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = "Blues")
test
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 1, brewer.palette = "Blues")
test <- data.table(group = factor(rep(1:6,500)), value = rnorm(3000, 50,15))
library(data.table)
test <- data.table(group = factor(rep(1:6,500)), value = rnorm(3000, 50,15))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 1, brewer.palette = "Blues")
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = "Blues")
document()
rm(list = c("barplot_eumelareg"))
document()
document()
?barplot_eumelareg
?geom_jitter
document()
?barplot_eumelareg
?geom_bar
?barplot_eumelareg
