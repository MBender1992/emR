length(test)
dim(test)
dim(test)[2]
lapply(1:dim(test)[2],as.data.frame, data = test)
?as.data.frame
lapply(1:dim(test)[2],as.data.frame, x = test)
as.data.frame(test[,2])
lapply(1:dim(test)[2],ls = test, function(x){
as.data.frame(ls[,x])
})
lapply(1:dim(test)[2], function(x){
as.data.frame(ls[,x])
},ls = test)
test
1:dim(test)[2]
lapply(1:dim(test)[2], function(x){
as.data.frame(test[,x])
})
ls <- mapply(generate_input_survplot, var1 = input[,1], var2 = input[,2], labs = input[,3])
ls
input <- data.frame(var1 = c("ECOG1", "LDH1"),
var2 = c("ECOG2", "LDH2"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")")))
ls <- mapply(generate_input_survplot, var1 = input[,1], var2 = input[,2], labs = input[,3])
ls
ls_input <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
ls_input
rbind.data.frame(ls_input)
rbind(ls_input[[1]],ls_input[[2]])
generate_input <- function(var1, var2, labs){
data.frame(time = c("time1", "time2", "OS1", "OS2"),
status = c("PFS1ZENS", "PFS2ZENS", "OSCENS", "OSCENS"),
var = rep(c(var1, var2),2),
labs = rep(c(labs),4))
}
data.frame(var1 = c("ECOG1", "LDH1"),
var2 = c("ECOG2", "LDH2"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")")))
input_df
vars <- data.frame(var1 = c("ECOG1", "LDH1"),
var2 = c("ECOG2", "LDH2"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")")))
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
input_df <- rbind(input_ls[[1]],input_ls[[2]])
input_df
vars <- data.frame(var1 = c("ECOG1", "LDH1"),
var2 = c("ECOG2", "LDH2"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")")))
input_df <- convert_input_df(vars)
# convert into to data.frame
convert_input_df <- function(vars){
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
input_df <- rbind(input_ls[[1]],input_ls[[2]])
return(input_df)
}
input_df <- convert_input_df(vars)
vars <- data.frame(var1 = c("ECOG1", "LDH1"),
var2 = c("ECOG2", "LDH2"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")")))
input_df <- convert_input_df(vars)
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE"),
var2 = c("ECOG2", "LDH2", "MELTYPE"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")")
))
vars
input_df <- convert_input_df(vars)
input_df
mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
1:dim(ls)
ls
dim(ls)
dim(ls)[2]
1:dim(ls)[2]
lapply(1:dim(ls)[2], function(x){
rbind(input_ls[,x])
})
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
lapply(1:dim(ls)[2], function(x){
rbind(input_ls[,x])
})
lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
})
rbind(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
rbind.data.frame(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
rbind(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
})
lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
})
lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
})
dplyr::bind_rows(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
convert_input_df <- function(vars){
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
# input_df <- rbind(input_ls[[1]],input_ls[[2]])
indput_df <- dplyr::bind_rows(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
return(input_df)
}
# convert into to data.frame
convert_input_df <- function(vars){
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
input_df <- dplyr::bind_rows(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
return(input_df)
}
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE"),
var2 = c("ECOG2", "LDH2", "MELTYPE"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")")
))
# data.frame input for survival function
input_df <- convert_input_df(vars)
input_df
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\"), \"SWIMELAREG\")")))
# data.frame input for survival function
input_df <- convert_input_df(vars)
input_df
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3], legend.labs = input_df[,4],
MoreArgs = list(data=dat_KM,  palette = "jco", table.margin.left = -8))
save_surv_plot_list_eumelareg(dat_KM, "REGISTR",table.margin.left = -37,
legend.labs= c("ADOReg", "CSEEREG", "DAMMED", "GEM", "SWIMELAREG"))
dev.off()
input_df[,4]
vars
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\", \"SWIMELAREG\")")))
input_df <- convert_input_df(vars)
# apply function to save survival plot to all required variables for OS and PFS
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3], legend.labs = input_df[,4],
MoreArgs = list(data=dat_KM,  palette = "jco", table.margin.left = -8))
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\", \"SWIMELAREG\")")),
table.margin.left = c(-8,-10, -15, -37))
vars
generate_input <- function(var1, var2, labs){
data.frame(time = c("time1", "time2", "OS1", "OS2"),
status = c("PFS1ZENS", "PFS2ZENS", "OSCENS", "OSCENS"),
var = rep(c(var1, var2),2),
labs = rep(labs,4),
table.margin.left = rep(table.margin.left,4))
}
convert_input_df <- function(vars){
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3], table.margin.left = vars[,4])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
input_df <- dplyr::bind_rows(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
return(input_df)
}
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\", \"SWIMELAREG\")")),
table.margin.left = c(-8,-10, -15, -37))
vars
convert_input_df(vars)
mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3], table.margin.left = vars[,4])
vars[,3]
vars[,4]
generate_input <- function(var1, var2, labs, table.margin.left){
data.frame(time = c("time1", "time2", "OS1", "OS2"),
status = c("PFS1ZENS", "PFS2ZENS", "OSCENS", "OSCENS"),
var = rep(c(var1, var2),2),
labs = rep(labs,4),
table.margin.left = rep(table.margin.left,4))
}
# convert into to data.frame
convert_input_df <- function(vars){
# generate input for survival function as list
ls <- mapply(generate_input, var1 = vars[,1], var2 = vars[,2], labs = vars[,3], table.margin.left = vars[,4])
input_ls <- lapply(1:dim(ls)[2], function(x){
as.data.frame(ls[,x])
})
# transform input into df
input_df <- dplyr::bind_rows(lapply(1:dim(ls)[2], function(x){
rbind(input_ls[[x]])
}))
return(input_df)
}
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\", \"SWIMELAREG\")")),
table.margin.left = c(-8,-10, -15, -37))
# data.frame input for survival function
input_df <- convert_input_df(vars)
input_df
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco"))
vars
input_df
input_df
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", REGISTR = "DAMMED"))
getwd()
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "DAMMED"))
dat_KM$MELTYPE
save_surv_plot_eumelareg <- function(data,time, status, var,legend.labs=NULL, regID = "REGISTR", registry = "EUMELAREG",path = NULL,...){
LOT <- stringr::str_extract(time, "\\d")
tmp <- stringr::str_extract(status, stringr::fixed(c("PFS","OS"), ignore_case=TRUE))
survival <- tmp[-which(is.na(tmp))]
if (is.null(path)) {
if (!dir.exists(paste("Results/survival_curve/",registry, sep = ""))) {
dir.create(paste("Results/survival_curve/",registry, sep = ""), recursive = TRUE)
}
path <- paste("Results/survival_curve/",registry, sep = "")
}
if (ifelse(is.na(stringr::str_extract(var,"\\d$") != LOT),TRUE, stringr::str_extract(var,"\\d$") != LOT)){
warning("Please check if grouping variable corresponds to the correct line of treatment")
}
if (registry != "EUMELAREG"){
data <-  data[eval(parse(text=regID)) == registry]
data[[var]] <- if(is.factor(data[[var]])) droplevels(data[[var]])
}
filename <- paste("/survival_curve_",var,"_",registry,"_",survival,LOT,".png", sep = "")
png(paste(path, filename, sep = ""), units="in", width=12, height=6.2, res=600)
if (!is.null(legend.labs)){
t <- try(parse(text = legend.labs), silent = TRUE)
if("try-error" %in% class(t)){
labs <- legend.labs
} else {
labs <- eval(parse(text = legend.labs))
}
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
} else {
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
}
print(p)
dev.off()
}
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "DAMMED"))
library(data.table)
library(readr)
library(lubridate)
## define functions
# change date format
convert_date <- function(x){
x <- ifelse(stringr::str_detect(x, "^\\d{4}$"), paste(x, "-06", sep = ""), x)
x <- ifelse(stringr::str_detect(x, "^\\d{4}-\\d{2}"), paste(x, "-15", sep = ""), x)
ymd <- ymd(x)
dmy <- dmy(x)
dmy[is.na(dmy)] <- ymd[is.na(dmy)]
return(dmy)
}
# convert responses to uniform format
convert_response <- function(x, trtdur){
x <- ifelse(x == "", NA, x)
x <- gsub("NC", "SD", x=x)
x <- gsub("NED", "CR", x=x)
x <- ifelse(x == "MR" & trtdur > 90, "SD", x)
x <- ifelse(x == "MR" & trtdur <= 90, "PD", x)
return(x)
}
# calculate ORR
calc_ORR <- function(x){
ifelse(x == "CR"| x == "PR", 1,0)
}
# calculate DCR
calc_DCR <- function(x){
ifelse(x == "CR"| x == "PR" | x == "SD" , 1,0)
}
# calculate PFS
calc_survival <- function(startDate, eventDate){
time <- eventDate - startDate
round(time_length(time,unit="months"),2)
}
## load data ==================================================
dat <- data.table(read.csv("Data/World_Melanoma_Congress_2021-04-12_nofirstrow.csv", sep = ";"))
# Keep only rows which fulfill all 8 quality checks
ind_QC <- which(dat$C01N ==1 & dat$C02N ==1 & dat$C03N ==1 & dat$C04N ==1 & dat$C05N ==1 & dat$C06N ==1 & dat$C07N ==1 & dat$C08N ==1)
dat_QC <- dat[ind_QC, ]
# add 15 as day to entries with only year and month and convert to standard date format
dat_QC$TRT1SDT <- convert_date(dat_QC$TRT1SDT)
dat_QC$TRT1EDT <- convert_date(dat_QC$TRT1EDT)
dat_QC$TRT2SDT <- convert_date(dat_QC$TRT2SDT)
dat_QC$TRT2EDT <- convert_date(dat_QC$TRT2EDT)
dat_QC$PFS1 <- convert_date(dat_QC$PFS1)
dat_QC$PFS2 <- convert_date(dat_QC$PFS2)
dat_QC$DTHDT <- convert_date(dat_QC$DTHDT)
dat_QC$OSDT <- convert_date(dat_QC$OSDT)
# quality check to remove patients with PFS before start of treatment
dat_QC <- dat_QC[!which(dat_QC$PFS1 < dat_QC$TRT1SDT | dat_QC$PFS2 < dat_QC$TRT2SDT),]
# calculate duration of treatment
dat_QC$TRT1DUR <- ifelse(dat_QC$EOTRES1 == "Ongoing", "Ongoing", dat_QC$TRT1EDT-dat_QC$TRT1SDT)
dat_QC$TRT2DUR <- ifelse(dat_QC$EOTRES2 == "Ongoing", "Ongoing", dat_QC$TRT2EDT-dat_QC$TRT2SDT)
# 17 patients with missing eot date
# dat_QC[which(is.na(dat_QC$TRT1DUR))]
# change NC, NB and MR to one of SD,  PR, PD, CR
dat_QC$BESTRES1 <- convert_response(dat_QC$BESTRES1, dat_QC$TRT1DUR)
dat_QC$BESTRES2 <- convert_response(dat_QC$BESTRES2, dat_QC$TRT2DUR)
# change long name to no and yes
dat_QC$BRAIN1 <- ifelse(dat_QC$BRAIN1 == "No brain metastases at index date", "No", "Yes")
dat_QC$BRAIN2 <- ifelse(dat_QC$BRAIN2 == "No brain metastases at index date", "No", "Yes")
# show greater than or equal 3 in ECOG
dat_QC$ECOG1 <- ifelse(dat_QC$ECOG1 == ">= 3", "\u2265 3", dat_QC$ECOG1)
dat_QC$ECOG2 <- ifelse(dat_QC$ECOG2 == ">= 3", "\u2265 3", dat_QC$ECOG2)
# replace "" by NA in ECOG
dat_QC$ECOG1 <- ifelse(dat_QC$ECOG1 == "", NA, dat_QC$ECOG1)
dat_QC$ECOG2 <- ifelse(dat_QC$ECOG2 == "", NA, dat_QC$ECOG2)
# show abbreviation for MUP
dat_QC$MELTYPE <- ifelse(dat_QC$MELTYPE == "Melanoma of unknown primary (MUP)", "MUP", dat_QC$MELTYPE)
# change censore variables
dat_QC$PFS1ZENS <- ifelse(dat_QC$PFS1ZENS == 0, 1,0)
dat_QC$PFS2ZENS <- ifelse(dat_QC$PFS2ZENS == 0, 1,0)
dat_QC$OSCENS <- ifelse(dat_QC$OSCENS == 0, 1,0)
# add ORR and DCR
dat_QC$ASSESS1 <- ifelse(!is.na(dat_QC$BESTRES1) & dat_QC$BESTRES1 != "NB", 1,0)
dat_QC$ORR1 <- calc_ORR(dat_QC$BESTRES1)
dat_QC$DCR1 <- calc_DCR(dat_QC$BESTRES1)
dat_QC$ASSESS2 <- ifelse(!is.na(dat_QC$BESTRES2) & dat_QC$BESTRES2 != "NB", 1,0)
dat_QC$ORR2 <- calc_ORR(dat_QC$BESTRES2)
dat_QC$DCR2 <- calc_DCR(dat_QC$BESTRES2)
# add PFS
dat_QC$time1 <- calc_survival(dat_QC$TRT1SDT, dat_QC$PFS1)
dat_QC$time2 <- calc_survival(dat_QC$TRT2SDT, dat_QC$PFS2)
# calculate OS
dat_QC$OS1 <- calc_survival(dat_QC$TRT1SDT, dat_QC$OSDT)
dat_QC$OS2 <- calc_survival(dat_QC$TRT2SDT, dat_QC$OSDT)
## ===========================================
##  format data for table1 input
# convert character columns to factor
dat_QC$GENDER <- factor(dat_QC$GENDER)
dat_QC$BRAF <- factor(dat_QC$BRAF)
dat_QC$ECOG1 <- factor(dat_QC$ECOG1, levels = c("0", "1", "2", "\u2265 3", "Unknown"))
dat_QC$ECOG2 <- factor(dat_QC$ECOG2, levels = c("0", "1", "2", "\u2265 3", "Unknown"))
dat_QC$LDH1 <- factor(dat_QC$LDH1, levels = c("Normal", "Increased", "Unknown"))
dat_QC$LDH2 <- factor(dat_QC$LDH2, levels = c("Normal", "Increased", "Unknown"))
dat_QC$BRAIN1 <- factor(dat_QC$BRAIN1)
dat_QC$BRAIN2 <- factor(dat_QC$BRAIN2)
dat_QC$Stage1 <- factor(dat_QC$Stage1)
dat_QC$Stage2 <- ifelse(dat_QC$Stage2 == "", NA, dat_QC$Stage2)
dat_QC$Stage2 <- factor(dat_QC$Stage2)
dat_QC$BESTRES1 <- factor(dat_QC$BESTRES1, levels = c("CR","PR", "SD", "PD", "NB"))
dat_QC$BESTRES2 <- factor(dat_QC$BESTRES2, levels = c("CR","PR", "SD", "PD", "NB"))
dat_QC$ORR1 <- factor(dat_QC$ORR1, levels = c(0,1), labels = c("SD+PD", "Overall response"))
dat_QC$ORR2 <- factor(dat_QC$ORR2, levels = c(0,1), labels = c("SD+PD", "Overall response"))
dat_QC$DCR1 <- factor(dat_QC$DCR1, levels = c(0,1), labels = c("PD", "Disease control"))
dat_QC$DCR2 <- factor(dat_QC$DCR2, levels = c(0,1), labels = c("PD", "Disease control"))
# label data
Hmisc::label(dat_QC$GENDER) <- "Gender"
Hmisc::label(dat_QC$AGE1) <- "Age (years)"
Hmisc::label(dat_QC$AGE2) <- "Age (years)"
Hmisc::label(dat_QC$ECOG1) <- "ECOG"
Hmisc::label(dat_QC$ECOG2) <- "ECOG"
Hmisc::label(dat_QC$LDH1) <- "LDH (ULN = 250 U/L)"
Hmisc::label(dat_QC$LDH2) <- "LDH (ULN = 250 U/L)"
Hmisc::label(dat_QC$BRAIN1) <- "Brain metastasis"
Hmisc::label(dat_QC$BRAIN2) <- "Brain metastasis"
Hmisc::label(dat_QC$Stage1) <- "AJCC Stage"
Hmisc::label(dat_QC$Stage2) <- "AJCC Stage"
Hmisc::label(dat_QC$ORR1) <- "ORR"
Hmisc::label(dat_QC$ORR2) <- "ORR"
Hmisc::label(dat_QC$DCR1) <- "DCR"
Hmisc::label(dat_QC$DCR2) <- "DCR"
Hmisc::label(dat_QC$time1) <- "PFS (months)"
Hmisc::label(dat_QC$time2) <- "PFS (months)"
Hmisc::label(dat_QC$OS1) <- "OS from start of therapy"
Hmisc::label(dat_QC$OS2) <- "OS from start of therapy"
dat_QC$MELTYPE
dat_KM[[MELTYPE]]
dat_KM[["MELTYPE"]]
dat_QC$MELTYPE <- factor(dat_QC$MELTYPE)
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "DAMMED"))
dev.off()
dev.off()
data <- dat_KM
regID <- "REGISTR"
registry <- "DAMMED"
data[eval(parse(text=regID)) == registry]
data <-  data[eval(parse(text=regID)) == registry]
data[[var]] <- if(is.factor(data[[var]])) droplevels(data[[var]])
data
var
data[[var]]
data[[var]]
var
var <- "MELTYPE"
data <-  data[eval(parse(text=regID)) == registry]
data
data[[var]]
dat_KM <- dat_QC
data <- dat_KM
data[[var]]
dat_KM <- dat_QC
vars <- data.frame(var1 = c("ECOG1", "LDH1", "MELTYPE", "REGISTR"),
var2 = c("ECOG2", "LDH2", "MELTYPE", "REGISTR"),
labs = c(c("c(\"0\", \"1\", \"2\", \"\\u2265 3\", \"Unknown\")"),
c("c(\"Normal\", \"Increased\", \"Unknown\")"),
c("c(\"Cutaneous\", \"Mucosal\", \"MUP\", \"Ocular\")"),
c("c(\"ADOReg\", \"CSEEREG\", \"DAMMED\", \"GEM\", \"SWIMELAREG\")")),
table.margin.left = c(-8,-10, -15, -37))
# data.frame input for survival function
input_df <- convert_input_df(vars)
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "DAMMED"))
dev.off()
convert_input_df(vars)
vars
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "GEM"))
# if you dont want an error to be thrown, remove the rows with var == REGISTR
mapply(save_surv_plot_eumelareg, time = input_df[,1], status = input_df[,2], var = input_df[,3],
legend.labs = input_df[,4], table.margin.left = input_df[,5],
MoreArgs = list(data=dat_KM,  palette = "jco", registry = "CSEEREG"))
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
rm(list = c("labs", "save_foresplot_eumelareg", "save_pie_chart_eumelareg", "save_surv_plot_eumelareg", "survplot_eumelareg", "vars"))
document()
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
rm(list = ls())
