setwd("..")
check(package)
# install package
install(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("table1_pval"))
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
test
table1_pval <- function(data, strat, vars, footnote = NULL, white.adjust = TRUE){
# calculate pvalue for each variable grouped by strata
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- data[[name]]
ind <- !is.na(y)
y <- y[ind]
aov_formula <- as.formula(paste(name, strat, sep = "~"))
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- suppressWarnings(rstatix::anova_test(data, formula = aov_formula, white.adjust = white.adjust)$p)
} else {
p <- chisq.test(table(y, droplevels(data[[strat]][ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
# add names to new strata
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# add column with pvalues
data[[strat]] <- factor(data[[strat]], levels = c(levels(data[[strat]]),2) , labels = c(levels(data[[strat]]),"P-value"))
formula <- as.formula(paste("~", paste(vars, collapse = "+")  , "|", strat))
table1(formula, data, droplevels = F, render=rndr,render.missing = NULL, render.strat=rndr.strat, footnote=footnote)
if (any(is.na(data[[strat]]))) {
warning("There are missing values in the grouping variable. These are excluded from statistical analysis.")
}
}
render.default
table1
library(table1)
render.default
chisq.test
?chisq.test
etwd(paste("./", package, sep = ""))
document()
setwd(paste("./", package, sep = ""))
document()
rm(list = c("table1_pval"))
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
install(package)
# check package
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
?desc
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
# install package
install(package)
library(plotROC)
library(ROCR)
library(emR)
library(ggh4x)
data(ROCR.simple)
df <- data.frame(ROCR.simple)
# calculate youden index
rocobj <- pROC::roc(df$labels, df$predictions)
youden_ind <- pROC::coords(rocobj, "best")
df
data(ROCR.simple)
df <- data.frame(ROCR.simple)
# calculate youden index
rocobj <- pROC::roc(df$labels, df$predictions)
youden_ind <- pROC::coords(rocobj, "best")
calc_auc
ggplot(df, aes(m = predictions, d = labels))+
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
rocplot <- ggplot(df, aes(m = predictions, d = labels))+
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
ROCplot_eumelareg <- function(predictions, labels, auc_label_x = 0.7, auc_label_y = 0.1, cutoff_label_x = 0.15, cutoff_label_y = 0.9, textsize = 12,){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc_label_x, y = auc_label_y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff_label_x, y = cutoff_label_y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg <- function(predictions, labels, auc_label_x = 0.7, auc_label_y = 0.1, cutoff_label_x = 0.15, cutoff_label_y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc_label_x, y = auc_label_y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff_label_x, y = cutoff_label_y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(predictins = df$predictions, labels = df$labels)
ROCplot_eumelareg(predictions = df$predictions, labels = df$labels)
rocplot
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- NULL
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels)
ROCplot_eumelareg(df$predictions, df$labels, print.auc = FALSE)
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
}
{
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels, print.auc = FALSE)
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
if(print.cutoff == TRUE){
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
} else {
cutoff_label <- ""
}
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels, print.auc = F, print.cutoff = F)
ROCplot_eumelareg(df$predictions, df$labels, print.auc = T, print.cutoff = F)
pROC::coords()
pROC::coords
?pROC::coords
pROC::coords(rocobj, "youden")
pROC::coords(rocobj, "all")
pROC::coords(rocobj, "best")
pROC::coords(rocobj, "best", best.method = "youden")
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("ROCplot_eumelareg"))
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
install(package)
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
?glm
?binomial
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
install(package)
