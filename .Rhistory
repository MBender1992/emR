# define df for CR and PR End
if(!is.null(response.end)){
response_end <- data[!is.na(data[[response.end]]), c(ID, response.end)]
response_end$responseType <- "Response end"
colnames(response_end) <- column_names
} else response_end <- NULL
# bind all dfs into one
dat_shapes <- rbind(response_start, response_end, durable, continued)
responseLevels <- c("Complete response start", "Partial response start", "Response end", "Durable", "Continued Treatment")
if(!is.null(response.start) & !is.null(response.type)){
dat_shapes$responseType <-  factor(dat_shapes$responseType, levels=responseLevels)
dat_shapes <- dplyr::arrange(dat_shapes, dplyr::desc(responseType))
}
# define data used for bars
if(!is.null(strat)){
dat_bar <- data[, c(ID, strat, end)]
} else {
dat_bar <- data[, c(ID,  end)]
}
dat_bar <- dplyr::distinct(dat_bar)
dat_bar$SUBJID <- forcats::fct_reorder(.f=dat_bar[[ID]], .x=as.numeric(dat_bar[[end]]), .desc = FALSE)
if(!is.null(strat) & stack.groups == TRUE){
dat_bar$SUBJID <- forcats::fct_reorder2(.f=dat_bar[[ID]], .x= as.numeric(dat_bar[[end]]), .y = as.numeric(dat_bar[[strat]]), .desc = TRUE)
}
# define max value for ylimits
max_val <- max(dat_bar[[end]])
# plot
if(!is.null(strat)){
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", aes_string(fill = strat), color = "black", width = 0.7) +
ggsci::scale_fill_jco(alpha = 0.7)
} else {
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", fill = "blue", color = "black", width = 0.7)
}
p <- p +
coord_flip() +
scale_colour_manual(values = c("Complete response start" = if(!is.null(response.start) & !is.null(response.type)) "#E41A1C",
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) "#377EB8",
"Response end" = if(!is.null(response.end)) "black",
"Durable" = if(!is.null(durable.response)) "black",
"Continued Treatment" =  if(!is.null(continued.response)) "black")) +
scale_shape_manual(values = c("Complete response start" =if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Response end" = if(!is.null(response.end)) unicode[["circle"]],
"Durable" = if(!is.null(durable.response)) unicode[["square"]],
"Continued Treatment" = if(!is.null(continued.response)) unicode[["arrow"]])) +
scale_y_continuous(limits = c(-0.5, max_val + 3.5), breaks = seq(0, max_val + 3, by = 3)) +
labs(fill = strat, colour = "Symbol Key", shape = "Symbol Key",  x = xlab, y = ylab, title = "Swimmer Plot",
caption ="Durable defined as subject with six months or more of confirmed response") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size=7, hjust=0),
panel.grid = element_blank())
if(!is.null(dat_shapes)){
p <- p + geom_point(data=dat_shapes, aes_string(ID, "time", colour="responseType", shape="responseType"), size= symbol.size)
}
}
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Group", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Group", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg <- function(data, ID, end, response.start = NULL, response.end = NULL, response.type = NULL, stack.groups = TRUE,
continued.response = NULL, durable.response = NULL, strat = NULL, symbol.size = 5,
xlab = NULL, ylab = NULL){
responseType <- NULL
# define symbols for response types
unicode <-  list(triangle=sprintf('\u25B2'), circle=sprintf('\u25CF'), square=sprintf('\u25A0'), arrow=sprintf('\u2794'))
if(!is.null(response.end) & !is.null(continued.response)){
data[[response.end]] <- ifelse(is.na(data[[response.end]] & data[[continued.response]] == FALSE), data[[end]], data[[response.end]])
}
# define name of column names
column_names <- c(ID, "time", "responseType")
# define df for durable responses
if(!is.null(durable.response)){
durable <- data[data[[durable.response]] == TRUE, c(ID, durable.response)]
durable$responseType <- "Durable"
colnames(durable) <- column_names
durable$time <- -0.25
} else durable <- NULL
# define df for continued responses
if(!is.null(continued.response)){
continued <- data[data[[continued.response]] == TRUE, c(ID, end)]
continued$responseType <- "Continued Treatment"
continued$End <- continued$End + 0.25 # adjust arrow position
colnames(continued) <- column_names
} else continued <- NULL
# define df for CR and PR Start
if(!is.null(response.start) & !is.null(response.type)){
response_start <- data[!is.na(data[[response.start]]), c(ID, response.type, response.start)]
response_start$responseType <- paste(response_start$Response, "start")
response_start <- response_start[,c(1,3,4)]
colnames(response_start) <- column_names
} else response_start <- NULL
# define df for CR and PR End
if(!is.null(response.end)){
response_end <- data[!is.na(data[[response.end]]), c(ID, response.end)]
response_end$responseType <- "Response end"
colnames(response_end) <- column_names
} else response_end <- NULL
# bind all dfs into one
dat_shapes <- rbind(response_start, response_end, durable, continued)
responseLevels <- c("Complete response start", "Partial response start", "Response end", "Durable", "Continued Treatment")
if(!is.null(response.start) & !is.null(response.type)){
dat_shapes$responseType <-  factor(dat_shapes$responseType, levels=responseLevels)
dat_shapes <- dplyr::arrange(dat_shapes, dplyr::desc(responseType))
}
# define data used for bars
if(!is.null(strat)){
dat_bar <- data[, c(ID, strat, end)]
} else {
dat_bar <- data[, c(ID,  end)]
}
dat_bar <- dplyr::distinct(dat_bar)
dat_bar$SUBJID <- forcats::fct_reorder(.f=dat_bar[[ID]], .x=as.numeric(dat_bar[[end]]), .desc = FALSE)
if(!is.null(strat) & stack.groups == TRUE){
dat_bar$SUBJID <- forcats::fct_reorder2(.f=dat_bar[[ID]], .x= as.numeric(dat_bar[[end]]), .y = as.numeric(dat_bar[[strat]]), .desc = TRUE)
}
# define max value for ylimits
max_val <- max(dat_bar[[end]])
# plot
if(!is.null(strat)){
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", aes_string(fill = strat), color = "black", width = 0.7) +
ggsci::scale_fill_jco(alpha = 0.7)
} else {
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", fill = "blue", color = "black", width = 0.7)
}
p <- p +
coord_flip() +
scale_colour_manual(values = c("Complete response start" = if(!is.null(response.start) & !is.null(response.type)) "#E41A1C",
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) "#377EB8",
"Response end" = if(!is.null(response.end)) "black",
"Durable" = if(!is.null(durable.response)) "black",
"Continued Treatment" =  if(!is.null(continued.response)) "black")) +
scale_shape_manual(values = c("Complete response start" =if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Response end" = if(!is.null(response.end)) unicode[["circle"]],
"Durable" = if(!is.null(durable.response)) unicode[["square"]],
"Continued Treatment" = if(!is.null(continued.response)) unicode[["arrow"]])) +
scale_y_continuous(limits = c(-0.5, max_val + 3.5), breaks = seq(0, max_val + 3, by = 3)) +
labs(fill = strat, colour = "Symbol Key", shape = "Symbol Key",  x = xlab, y = ylab, title = "Swimmer Plot",
caption ="Durable defined as subject with six months or more of confirmed response") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size=7, hjust=0),
panel.grid = element_blank())
if(!is.null(dat_shapes)){
p <- p + geom_point(data=dat_shapes, aes_string(ID, "time", colour="responseType", shape="responseType"), size= symbol.size)
}
print(p)
}
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Group", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = NULL, xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg <- function(data, ID, end, response.start = NULL, response.end = NULL, response.type = NULL, stack.groups = TRUE,
continued.response = NULL, durable.response = NULL, strat = NULL, symbol.size = 5,
xlab = NULL, ylab = NULL){
responseType <- NULL
# define symbols for response types
unicode <-  list(triangle=sprintf('\u25B2'), circle=sprintf('\u25CF'), square=sprintf('\u25A0'), arrow=sprintf('\u2794'))
if(!is.null(response.end) & !is.null(continued.response)){
data[[response.end]] <- ifelse(is.na(data[[response.end]] & data[[continued.response]] == FALSE), data[[end]], data[[response.end]])
}
# define name of column names
column_names <- c(ID, "time", "responseType")
# define df for durable responses
if(!is.null(durable.response)){
durable <- data[data[[durable.response]] == TRUE, c(ID, durable.response)]
durable$responseType <- "Durable"
colnames(durable) <- column_names
durable$time <- -0.25
} else durable <- NULL
# define df for continued responses
if(!is.null(continued.response)){
continued <- data[data[[continued.response]] == TRUE, c(ID, end)]
continued$responseType <- "Continued Treatment"
continued$End <- continued$End + 0.25 # adjust arrow position
colnames(continued) <- column_names
} else continued <- NULL
# define df for CR and PR Start
if(!is.null(response.start) & !is.null(response.type)){
response_start <- data[!is.na(data[[response.start]]), c(ID, response.type, response.start)]
response_start$responseType <- paste(response_start$Response, "start")
response_start <- response_start[,c(1,3,4)]
colnames(response_start) <- column_names
} else response_start <- NULL
# define df for CR and PR End
if(!is.null(response.end)){
response_end <- data[!is.na(data[[response.end]]), c(ID, response.end)]
response_end$responseType <- "Response end"
colnames(response_end) <- column_names
} else response_end <- NULL
# bind all dfs into one
dat_shapes <- rbind(response_start, response_end, durable, continued)
responseLevels <- c("Complete response start", "Partial response start", "Response end", "Durable", "Continued Treatment")
if(!is.null(response.start) & !is.null(response.type)){
dat_shapes$responseType <-  factor(dat_shapes$responseType, levels=responseLevels)
dat_shapes <- dplyr::arrange(dat_shapes, dplyr::desc(responseType))
}
# define data used for bars
if(!is.null(strat)){
dat_bar <- data[, c(ID, strat, end)]
} else {
dat_bar <- data[, c(ID,  end)]
}
dat_bar <- dplyr::distinct(dat_bar)
dat_bar$SUBJID <- forcats::fct_reorder(.f=dat_bar[[ID]], .x=as.numeric(dat_bar[[end]]), .desc = FALSE)
if(!is.null(strat) & stack.groups == TRUE){
dat_bar$SUBJID <- forcats::fct_reorder2(.f=dat_bar[[ID]], .x= as.numeric(dat_bar[[end]]), .y = as.numeric(dat_bar[[strat]]), .desc = TRUE)
}
# define max value for ylimits
max_val <- max(dat_bar[[end]])
# plot
if(!is.null(strat)){
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", aes_string(fill = strat), color = "black", width = 0.7) +
ggsci::scale_fill_jco(alpha = 0.7)
} else {
p <- ggplot(dat_bar,aes_string(x= ID, y = end)) +
geom_bar(stat = "identity", fill = "grey", color = "black", width = 0.7)
}
p <- p +
coord_flip() +
scale_colour_manual(values = c("Complete response start" = if(!is.null(response.start) & !is.null(response.type)) "#E41A1C",
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) "#377EB8",
"Response end" = if(!is.null(response.end)) "black",
"Durable" = if(!is.null(durable.response)) "black",
"Continued Treatment" =  if(!is.null(continued.response)) "black")) +
scale_shape_manual(values = c("Complete response start" =if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Partial response start" = if(!is.null(response.start) & !is.null(response.type)) unicode[["triangle"]],
"Response end" = if(!is.null(response.end)) unicode[["circle"]],
"Durable" = if(!is.null(durable.response)) unicode[["square"]],
"Continued Treatment" = if(!is.null(continued.response)) unicode[["arrow"]])) +
scale_y_continuous(limits = c(-0.5, max_val + 3.5), breaks = seq(0, max_val + 3, by = 3)) +
labs(fill = strat, colour = "Symbol Key", shape = "Symbol Key",  x = xlab, y = ylab, title = "Swimmer Plot",
caption ="Durable defined as subject with six months or more of confirmed response") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size=7, hjust=0),
panel.grid = element_blank())
if(!is.null(dat_shapes)){
p <- p + geom_point(data=dat_shapes, aes_string(ID, "time", colour="responseType", shape="responseType"), size= symbol.size)
}
print(p)
}
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Group", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = NULL, xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Groups", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Groups", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
swimplot_eumelareg(data = test, ID = "SUBJID", end = "End", response.start = "ResStart", response.end = "ResEnd",
response.type = "Response", continued.response = "Continued", durable.response = "Durable", stack.groups = TRUE,
strat = "Group", xlab = "Subject ID", ylab = "Months since diagnosis", symbol.size = 4)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("mi_coxph", "swimplot_eumelareg"))
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# install package
install(package)
# check package
setwd("..")
# install package
install(package)
library(emR)
nested_list_mean
?nested_list_mean
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
library(emR)
# filter data with assessable response for 1st LOT
dat_response <- dat
fn_res <- "CR: complete response. PR: partial response. SD: stable disease. PD: progressive disease.
ORR: overall response rate. DCR: disease control rate. PFS: Progression free survival. OS: Overall survival.
ToT: Time on treatment. TTNT: Time to next treatment."
## ======================================
## 1st Line of treatment
# wrapper around outcome_table_survival for quick calculation of tables by just replacing the grouping variables
quick_table <- function(var){
arg.list <- list(
data = dat_response,
time = c("PFS1", "PFS2","OS"),
status = c("PFS1CENS", "PFS2CENS","OSCENS"),
surv_names = c("Median PFS1 (95% CI)", "Median PFS2 (95% CI)","Median OS (95% CI) from start of 1st line treatment"),
var = var,
bestres = "BOR2",
ORR = "ORR2",
statistics = TRUE,
footnote = fn_res,
font = "calibri"
)
do.call(outcome_table_survival, arg.list)
}
quick_table("TRT1GR")
library(emR)
# filter data with assessable response for 1st LOT
dat_response <- dat
fn_res <- "CR: complete response. PR: partial response. SD: stable disease. PD: progressive disease.
ORR: overall response rate. DCR: disease control rate. PFS: Progression free survival. OS: Overall survival.
ToT: Time on treatment. TTNT: Time to next treatment."
## ======================================
## 1st Line of treatment
# wrapper around outcome_table_survival for quick calculation of tables by just replacing the grouping variables
quick_table <- function(var){
arg.list <- list(
data = dat_response,
time = c("PFS1", "PFS2","OS"),
status = c("PFS1CENS", "PFS2CENS","OSCENS"),
surv_names = c("Median PFS1 (95% CI)", "Median PFS2 (95% CI)","Median OS (95% CI) from start of 1st line treatment"),
var = var,
bestres = "BOR2",
ORR = "ORR2",
statistics = TRUE,
footnote = fn_res,
font = "calibri"
)
do.call(outcome_table_survival, arg.list)
}
# 1st line therapy
quick_table("TRT1GR")
dat_response
dat_response <- dat
dat
#' This code generates a forest plot from a coxph model.
#' @inheritParams survminer::ggforest
#' @param fit
#' @param varnames Character vector specifying rownames of the table (empty columns should be named with "").
#' @param vars variables that were used in the coxph model
#' @param point.size Size of mean points.
#' @param line.size Size of errorbar line.
#' @param vjust_text vertical adjustment of text containing information about events, global pvalue, AIC and concordance index
#' @param y_breaks argument to supply manual y_breaks as a numerical vector. Default is NULL and breaks are set automatically within the function.
#' @export
?ggforest
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
# install package
install(package)
3
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# install package
install(package)
# check package
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
install(package)
