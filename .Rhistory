scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc_label_x, y = auc_label_y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff_label_x, y = cutoff_label_y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg <- function(predictions, labels, auc_label_x = 0.7, auc_label_y = 0.1, cutoff_label_x = 0.15, cutoff_label_y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc_label_x, y = auc_label_y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff_label_x, y = cutoff_label_y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(predictins = df$predictions, labels = df$labels)
ROCplot_eumelareg(predictions = df$predictions, labels = df$labels)
rocplot
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- NULL
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels)
ROCplot_eumelareg(df$predictions, df$labels, print.auc = FALSE)
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
}
{
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels, print.auc = FALSE)
ROCplot_eumelareg <- function(predictions, labels,print.auc = TRUE, print.cutoff = TRUE, auc.label.x = 0.7, auc.label.y = 0.1, cutoff.label.x = 0.15, cutoff.label.y = 0.9, textsize = 12){
df <- data.frame(predictions = predictions, labels = labels)
# calculate youden index
rocobj <- pROC::roc(labels, predictions)
youden_ind <- pROC::coords(rocobj, "best")
#
rocplot <- ggplot(df, aes(m = predictions, d = labels)) +
geom_roc(cutoffs.at = youden_ind$threshold, cutoff.labels = "")
# define labels for auc and cutoff
if(print.cutoff == TRUE){
cutoff_label <- paste(round(youden_ind$threshold, 2), " (",round(youden_ind$specificity, 2),";", round(youden_ind$sensitivity, 2), ")", sep = "")
} else {
cutoff_label <- ""
}
if(print.auc == TRUE){
auc_label <- paste("AUC:", round(calc_auc(rocplot)$AUC, 3))
} else {
auc_label <- ""
}
# plot ROC curve
rocplot +
xlab("1 - Specificity") +
ylab ("Sensitivity") +
scale_x_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,1,0.2), guide = ggh4x::guide_axis_minor(), labels = scales::percent, expand = c(0,0)) +
theme_bw() +
geom_abline(lty = 2, color = "red") +
geom_text(aes(x = auc.label.x, y = auc.label.y), label = auc_label, size = (textsize-1)/2.54) +
geom_text(aes(x = cutoff.label.x, y = cutoff.label.y), label = cutoff_label, size = (textsize-1)/2.54) +
theme(axis.title = element_text(size = textsize, face = "bold"),
axis.text = element_text(size = textsize))
}
ROCplot_eumelareg(df$predictions, df$labels, print.auc = F, print.cutoff = F)
ROCplot_eumelareg(df$predictions, df$labels, print.auc = T, print.cutoff = F)
pROC::coords()
pROC::coords
?pROC::coords
pROC::coords(rocobj, "youden")
pROC::coords(rocobj, "all")
pROC::coords(rocobj, "best")
pROC::coords(rocobj, "best", best.method = "youden")
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("ROCplot_eumelareg"))
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
install(package)
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
?glm
?binomial
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
install(package)
# check package
setwd("..")
# install package
install(package)
warnings()
#' Forest Plot for Cox Proportional Hazards Model in EuMelaReg style
#'
#' This code generates a forest plot from a coxph model.
#' @inheritParams survminer::ggforest
#' @param varnames Character vector specifying rownames of the table (empty columns should be named with "").
#' @param point.size Size of mean points.
#' @param line.size Size of errorbar line.
#' @param vjust_text vertical adjustment of text containing information about events, global pvalue, AIC and concordance index
#' @param y_breaks argument to supply manual y_breaks as a numerical vector. Default is NULL and breaks are set automatically within the function.
#' @export
forestplot_eumelareg <- function (model, data = NULL, main = "Hazard ratio for disease progression or death (95% CI)", y_breaks = NULL,
cpositions = c(0.02,   0.22, 0.4),point.size = 3, fontsize = 0.7,line.size = 0.7, vjust_text = 1.2,
refLabel = "reference", noDigits = 2, varnames = NULL){
conf.high <- conf.low <- estimate <- var <- NULL
if(class(model)[1] == "mipo.summary"){
if(is.null(data)) stop("Please provide data.")
data <- as.data.frame(data)
terms <- as.character(data.frame(rbind(lapply(data, class))[, vars])[2,])
names(terms) <- vars
coef <- model
message("Using results from multiple imputation.")
} else {
stopifnot(inherits(model, "coxph"))
data <- insight::get_data(model, data = data)
terms <- attr(model$terms, "dataClasses")[-1]
coef <- as.data.frame(broom::tidy(model, conf.int = TRUE))
gmodel <- broom::glance(model)
}
allTerms <- lapply(seq_along(terms), function(i) {
var <- names(terms)[i]
if (terms[i] %in% c("factor", "character")) {
adf <- as.data.frame(table(data[, var]))
cbind(var = var, adf, pos = 1:nrow(adf))
}
else if (terms[i] == "numeric") {
data.frame(var = var, Var1 = "", Freq = nrow(data),
pos = 1)
}
else {
vars = grep(paste0("^", var, "*."), coef$term,
value = TRUE)
data.frame(var = vars, Var1 = "", Freq = nrow(data),
pos = seq_along(vars))
}
})
allTermsDF <- do.call(rbind, allTerms)
colnames(allTermsDF) <- c("var", "level", "N","pos")
inds <- apply(allTermsDF[, 1:2], 1, paste0, collapse = "")
rownames(coef) <- gsub(coef$term, pattern = "`", replacement = "")
toShow <- cbind(allTermsDF, coef[inds, ])[, c("var",
"level", "N", "p.value", "estimate",
"conf.low", "conf.high", "pos")]
if (!is.null(varnames)) toShow$var <- varnames
toShowExp <- toShow[, 5:7]
toShowExp[is.na(toShowExp)] <- 0
toShowExp <- format(exp(toShowExp), digits = noDigits)
toShowExpClean <- data.frame(toShow, pvalue = signif(toShow[,4], noDigits + 1), toShowExp)
toShowExpClean$stars <- paste0(round(toShowExpClean$p.value,
noDigits + 1), " ", ifelse(toShowExpClean$p.value <  0.05, "*", ""),
ifelse(toShowExpClean$p.value <   0.01, "*", ""),
ifelse(toShowExpClean$p.value < 0.001, "*", ""))
toShowExpClean$ci <- paste0("(", toShowExpClean[, "conf.low.1"],
" - ", toShowExpClean[, "conf.high.1"], ")")
toShowExpClean$estimate.1[is.na(toShowExpClean$estimate)] = refLabel
toShowExpClean$stars[which(toShowExpClean$p.value < 0.001)] = "<0.001 ***"
toShowExpClean$stars[is.na(toShowExpClean$estimate)] = ""
toShowExpClean$ci[is.na(toShowExpClean$estimate)] = ""
toShowExpClean$estimate[is.na(toShowExpClean$estimate)] = 0
toShowExpClean$var = as.character(toShowExpClean$var)
toShowExpClean$var[duplicated(toShowExpClean$var)] = ""
toShowExpClean$N <- paste0("(N=", toShowExpClean$N, ")")
toShowExpClean$levelN <- paste(toShowExpClean$level, toShowExpClean$N) #neu
toShowExpClean$estimateCI <- paste(toShowExpClean$estimate.1, toShowExpClean$ci) # neu
toShowExpClean <- toShowExpClean[nrow(toShowExpClean):1,]
toShowExpClean$estimate <- ifelse(toShowExpClean$estimate == 0, NA, toShowExpClean$estimate)
rangeb <- range(toShowExpClean$conf.low, toShowExpClean$conf.high, na.rm = TRUE)
breaks <- grDevices::axisTicks(rangeb/2, log = TRUE, nint = 7)
rangeplot <- rangeb
rangeplot[1] <- rangeplot[1] - diff(rangeb)
rangeplot[2] <- rangeplot[2] + 0.15 * diff(rangeb)
width <- diff(rangeplot)
y_variable <- rangeplot[1] + cpositions[1] * width
y_nlevel <- rangeplot[1] + cpositions[2] * width
y_cistring <- rangeplot[1] + cpositions[3] * width
y_stars <- rangeb[2]
x_annotate <- seq_len(nrow(toShowExpClean))
annot_size_mm <- fontsize * as.numeric(grid::convertX(unit(theme_get()$text$size,"pt"), "mm"))
p <- ggplot(toShowExpClean, aes(seq_along(var), exp(estimate))) +
geom_rect(aes(xmin = seq_along(var) - 0.5, xmax = seq_along(var) +
0.5, ymin = exp(rangeplot[1]), ymax = exp(rangeplot[2]),
fill = ordered(seq_along(var)%%2 + 1))) +
# color of the rectangles
scale_fill_manual(values = c("#FFFFFF33","grey95"), guide = "none") +
# show confidence intervals
geom_errorbar(aes(ymin = exp(conf.low), ymax = exp(conf.high)),size = line.size, width =0) +
# plot mean points
geom_point(pch = 16, size = point.size, color = "#009AA6") +
# add no effect line at 1
geom_hline(yintercept = 1, linetype = 2) +
coord_flip(ylim = exp(rangeplot)) +
ggtitle(main) +
theme_light() +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none",
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5)) +
xlab("") +
annotate(geom = "text", x = x_annotate,
y = exp(y_variable), label = toShowExpClean$var, fontface = "bold",
hjust = 0, size = annot_size_mm) +
annotate(geom = "text", x = x_annotate, y = exp(y_nlevel), hjust = 0, label = toShowExpClean$levelN,
# vjust = -0.1,
size = annot_size_mm) +
# Annotate mean HR
annotate(geom = "text",  x = x_annotate, y = exp(y_cistring), label = toShowExpClean$estimateCI,
size = annot_size_mm) +
# Annotate stars
annotate(geom = "text", x = x_annotate, y = exp(y_stars),
label = toShowExpClean$stars, size = annot_size_mm,
hjust = -0.2, fontface = "italic") #+
if(inherits(model, "coxph")){
p <- p +  annotate(geom = "text", x = 0.5, y = exp(y_variable),
label = paste0("# Events: ",   gmodel$nevent, "; Global p-value (Log-Rank): ",
format.pval(gmodel$p.value.log, eps = ".001"),
" \nAIC: ", round(gmodel$AIC, 2), "; Concordance Index: ",
round(gmodel$concordance, 2)), size = annot_size_mm,
hjust = 0, vjust = vjust_text, fontface = "italic")
}
if(!is.null(y_breaks)){
p <- p + scale_y_log10(name = "", expand = c(0.02, 0.02), breaks = y_breaks)
} else {
p <- p + scale_y_log10(name = "", labels = sprintf("%g", breaks), expand = c(0.02, 0.02), breaks = breaks)
}
gt <-suppressWarnings(ggplot_gtable(ggplot_build(p)))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
ggpubr::as_ggplot(gt)
}
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("forestplot_eumelareg"))
setwd(paste("./", package, sep = ""))
document()
forestplot_eumelareg
install(package)
# check package
setwd("..")
# install package
install(package)
forestplot_eumelareg
