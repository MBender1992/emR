save_surv_plot_eumelareg <- function(data,time, status, var,legend.labs=NULL, regID = "REGISTR", registry = "EUMELAREG",path = NULL,...){
LOT <- stringr::str_extract(time, "\\d")
tmp <- stringr::str_extract(status, stringr::fixed(c("PFS","OS"), ignore_case=TRUE))
survival <- tmp[-which(is.na(tmp))]
if (is.null(path)) {
if (!dir.exists(paste("Results/survival_curve/",registry, sep = ""))) {
dir.create(paste("Results/survival_curve/",registry, sep = ""), recursive = TRUE)
}
path <- paste("Results/survival_curve/",registry, sep = "")
}
if (ifelse(is.na(stringr::str_extract(var,"\\d$") != LOT),TRUE, stringr::str_extract(var,"\\d$") != LOT)){
warning("Please check if grouping variable corresponds to the correct line of treatment")
}
if (registry != "EUMELAREG"){
data <-  data[eval(parse(text=regID)) == registry]
data[[var]] <- droplevels(data[[var]])
}
filename <- paste("/survival_curve_",var,"_",registry,"_",survival,LOT,".png", sep = "")
png(paste(path, filename, sep = ""), units="in", width=12, height=6.2, res=600)
if (!is.null(legend.labs)){
t <- try(parse(text = legend.labs), silent = TRUE)
if("try-error" %in% class(t)){
labs <- legend.labs
} else {
labs <- eval(parse(text = legend.labs))
}
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
} else {
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
}
print(p)
dev.off()
}
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
setwd("..")
check("emR")
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?cox_output
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?cox_output
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?cox_output
?roundUp
?breakFun
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
setwd("..")
check("emR")
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
install("emR")
setwd("C:/MBender/Arbeit/Github/EUMELAREG/EMR_PD1")
setwd("C:/MBender/Arbeit/Github")
install("emR")
?survplot_eumelareg
#' Print table1 with pvalues
#'
#' This function calculates statistics and prints results in a table generated with [table1()]. For categorical data
#' chiÂ² test is used, for numerical data Welch ANOVA is conducted
#' @param data data.frame or data.table containing patient characteristics and demographics
#' @param strat strata to group by
#' @param vars character vector specifying columns that shall be included in the table
#' @inheritParams table1::table1
#' @inheritParams rstatix::anova_test
#' @export
table1_pval <- function(data, strat, vars, footnote = NULL, white.adjust = TRUE){
# calculate pvalue for each variable grouped by strata
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- data[[name]]
ind <- !is.na(y)
y <- y[ind]
aov_formula <- as.formula(paste(name, strat, sep = "~"))
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- rstatix::anova_test(data, formula = test, white.adjust = white.adjust)$p
} else {
p <- chisq.test(table(y, droplevels(data[[strat]][ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
# add names to new strata
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# add column with pvalues
data[[strat]] <- factor(data[[strat]], levels = c(levels(data[[strat]]),2) , labels = c(levels(data[[strat]]),"P-value"))
formula <- as.formula(paste("~", paste(vars, collapse = "+")  , "|", strat))
table1(formula, data, droplevels = F, render=rndr,render.missing = NULL, render.strat=rndr.strat, footnote=footnote)
}
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "mlekb"
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
rm(list = c("table1_pval"))
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
test
table1_pval <- function(data, strat, vars, footnote = NULL, white.adjust = TRUE){
# calculate pvalue for each variable grouped by strata
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- data[[name]]
ind <- !is.na(y)
y <- y[ind]
aov_formula <- as.formula(paste(name, strat, sep = "~"))
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- suppressWarnings(rstatix::anova_test(data, formula = aov_formula, white.adjust = white.adjust)$p)
} else {
p <- chisq.test(table(y, droplevels(data[[strat]][ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
# add names to new strata
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# add column with pvalues
data[[strat]] <- factor(data[[strat]], levels = c(levels(data[[strat]]),2) , labels = c(levels(data[[strat]]),"P-value"))
formula <- as.formula(paste("~", paste(vars, collapse = "+")  , "|", strat))
table1(formula, data, droplevels = F, render=rndr,render.missing = NULL, render.strat=rndr.strat, footnote=footnote)
if (any(is.na(data[[strat]]))) {
warning("There are missing values in the grouping variable. These are excluded from statistical analysis.")
}
}
render.default
table1
library(table1)
render.default
chisq.test
?chisq.test
etwd(paste("./", package, sep = ""))
document()
setwd(paste("./", package, sep = ""))
document()
rm(list = c("table1_pval"))
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
install(package)
# check package
setwd("..")
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
# install package
install(package)
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
# package name
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
setwd("..")
check(package)
?desc
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
# check package
setwd("..")
check(package)
# install package
install(package)
