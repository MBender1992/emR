colfunc <- colorRampPalette(c("#009AA6", "#001489"))
colfunc(4)
plot(rep(1,4),col=colfunc(4),pch=19,cex=3)
colfunc <- colorRampPalette(c("#009AA6", "#001489"))
colfunc(3)
plot(rep(1,3),col=colfunc(3),pch=19,cex=3)
colfunc(3)
ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=colfunc(3)) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
colfunc <- colorRampPalette(c("yellow","#009AA6", "#001489"))
colfunc(3)
# Create pie Chart
ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=colfunc(3)) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
colfunc <- colorRampPalette(c("yellow","#009AA6", "#001489"))
colfunc(10)
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc(10)
# Create pie Chart
ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=c("#55BB6E","#009AA6", "#001489")) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
colfunc <- colorRampPalette(c("#009AA6", "#001489"))
colfunc(10)
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = colfunc(6))
library(emR)
library(data.table)
library(survival)
library(ggplot2)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = colfunc(6))
barplot_eumelareg
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = n$y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
scale_fill_brewer(palette = brewer.palette) +
ylab(ylab)
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = colfunc(6))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5)
test <- data.table(group = factor(rep(1:6,500)), value = rnorm(3000, 50,15))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = colfunc(6))
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
p + scale_fill_brewer(palette = brewer.palette)
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5)
PieDonut
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu", ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
stop("Please specify either brewer.palette or custom.palette")
}
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5)
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu",custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
stop("Please specify either brewer.palette or custom.palette")
}
}
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu",custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
stop("Please specify either brewer.palette or custom.palette")
}
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = NULL)
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu",custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
p
} else {
stop("Please specify either brewer.palette or custom.palette")
}
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = NULL)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = NULL)
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = "RdYlBu",custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
p
}
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, brewer.palette = NULL)
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = NULL,custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(palette = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
p
}
}
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = colfun(6))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = colfunc(6))
colfunc(6)
ggplot(test(aes(group, value))) + geom_boxplot(fill = group)
test <- data.table(group = factor(rep(1:6,500)), value = rnorm(3000, 50,15))
ggplot(test,(aes(group, value))) + geom_boxplot(fill = group)
test
ggplot(test,aes(group, value)) + geom_boxplot(fill = group)
ggplot(data = test,aes(x=group, y=value))
ggplot(data = test,aes(x=group, y=value)) + geom_boxplot(fill = group)
ggplot(data = test,aes(x=group, y=value)) + geom_boxplot(aes(fill = group))
ggplot(data = test,aes(x=group, y=value)) + geom_boxplot(aes(fill = group)) + scale_fill_manual(values = colfunc(6))
barplot_eumelareg <- function(data,x,y,n.vjust = 0.05, bar.border.size = 1, bar.alpha = 0.5, bar.width = 0.5, y.breaks = breakFun,
errorbar.fun = "mean_sdl", errorbar.width = 0.3, errorbar.size = 1.3, textsize = 14,
brewer.palette = NULL,custom.palette = NULL, ylab = "Value", dotplot.binwidth = 1){
data <- data.table::data.table(data)
n <- aggregate(as.formula(paste(y,"~",x)), data = data, FUN = length)
n$y.pos <- data[data[, .I[eval(parse(text=y)) == max(eval(parse(text=y)))], by=eval(parse(text=x))]$V1][[y]] * (1+n.vjust)
lim <- max(data[[y]])* (1+2*n.vjust)
p <- ggplot(data, aes_string(x, y, fill = x)) +
geom_bar(stat = "summary", fun = "mean", color = "black", size = bar.border.size,
alpha = bar.alpha, width = bar.width)+
geom_errorbar(stat = "summary", fun.data = errorbar.fun,
fun.args = list(mult = 1), width  = errorbar.width, size = errorbar.size) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = dotplot.binwidth)+ # oder geom_jitter als Alternative?
geom_text(data = n, aes(label = eval(parse(text=y)), y = y.pos),  vjust = -1)+
theme_eumelareg_barplot(textsize = textsize) +
scale_y_continuous(expand = c(0, 0),breaks = y.breaks,  limits  = c(0, lim))+
ylab(ylab)
if(!is.null(brewer.palette) & is.null(custom.palette)) {
p + scale_fill_brewer(palette = brewer.palette)
} else if (!is.null(custom.palette) & is.null(brewer.palette)) {
p + scale_fill_manual(values = custom.palette)
} else  if (!is.null(brewer.palette) & !is.null(custom.palette)) {
stop("Please only specify one of the two arguments \"brewer palette\" and \"custom palette\" ")
} else {
p
}
}
ggplot(data = test,aes(x=group, y=value)) + geom_boxplot(aes(fill = group)) + scale_fill_manual(values = colfunc(6))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = colfunc(6))
emr_cols <- colorRampPalette(c("#009AA6", "#001489"))
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
setwd("..")
check("emR")
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
setwd("..")
check("emR")
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
rm(list = c("barplot_eumelareg", "emr_cols"))
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
setwd("..")
check("emR")
?emr_cols
?colorRampPalette
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?colorRampPalette
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
?colorRampPalette
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = emr_cols(6))
emr_cols
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?emr_cols
emr_cols
emr_cols(6)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = emr_cols(6))
png("test.png", units="in", width=11, height=4, res=1200)
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = emr_cols(6))
dev.off()
test <- data.table(group = factor(rep(1:6,500)), value = rnorm(3000, 20,2))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = emr_cols(6))
test <- data.table(group = factor(rep(1:6,30)), value = rnorm(180, 20,2))
barplot_eumelareg(data = test, x="group", y = "value", n.vjust =.07, dotplot.binwidth = 0.5, custom.palette = emr_cols(6))
y  <- factor(c(rep("cutaneous", 200), rep("mucosal",50), rep("MUP",30)))
df <- as.data.frame(table(y)/length(y))
colnames(df) <- c("group", "value")
# Create pie Chart
ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=c("#55BB6E","#009AA6", "#001489")) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
# Create pie Chart
ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=emr_cols(3)) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
# Create pie Chart
pie <- ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(stat="identity", width=1, color = "white")+
coord_polar("y", start=0) +
geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5), color = "white", size = 6) +
scale_fill_manual(values=emr_cols(3)) +
labs(x = NULL, y = NULL, fill = NULL, title = "Melanoma Subtypes") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
plot.title = element_text(hjust = 0.5, color = "#666666"))
png("pie.png", units="in", width=5, height=4, res=1200)
pie
dev.off()
fit <- survfit(Surv(time, status) ~ ph.ecog, data = lung)
survplot_eumelareg(fit, lung, var = "ph.ecog",table.margin.left = 35, palette="RdYlBu")
?ggsurvplot
emr_cols(4)
survplot_eumelareg(fit, lung, var = "ph.ecog",table.margin.left = 35, palette=emr_cols(4))
# png("test.png", units="in", width=10, height=5, res=1200)
survplot_eumelareg(fit, lung, var = "sex",table.margin.left = 0,  legend.labs = c("Male", "Female"), palette=emr_cols(4))
# png("test.png", units="in", width=10, height=5, res=1200)
survplot_eumelareg(fit, lung, var = "sex",table.margin.left = 0,  legend.labs = c("Male", "Female"), palette=emr_cols(2))
# sex fit
fit <- survfit(Surv(time, status) ~ sex, data = lung)
# png("test.png", units="in", width=10, height=5, res=1200)
survplot_eumelareg(fit, lung, var = "sex",table.margin.left = 0,  legend.labs = c("Male", "Female"), palette=emr_cols(2))
?survival
survival::survfit
?survival::survfit
?survival::Surv
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?SurvFun
survplot_eumelareg <- function(fit,data,time = "time", status = "status", var, xlab = "Time in months",
ylab = "Probability of Overall Survival",pval = TRUE, break.y.by = 0.1,
break.time.by = 3, ggtheme = theme_eumelareg_surv_plot(),
tables.theme = theme_eumelareg_surv_table(), axes.offset = TRUE,
risk.table = "absolute", risk.table.y.text = TRUE,risk.table.title = "No. at Risk",
table.margin.left = 0, legend.labs = NULL, palette = "RdYlBu"){
fit <- SurvFun(time, status, grouping = var, data = data)
# plot survival curve
ggsurv <- ggsurvplot(fit,data = data, xlab = xlab,  ylab = ylab, pval = pval,
break.y.by = break.y.by, break.time.by = break.time.by, ggtheme = ggtheme,
tables.theme = tables.theme, axes.offset = axes.offset, risk.table = risk.table,
risk.table.y.text = risk.table.y.text, risk.table.title = risk.table.title,
legend.labs =  legend.labs, palette =  palette)
# adjust position of risk table
ggsurv$table <- ggsurv$table +
theme(plot.margin = unit(c(5.5, 5.5, 5.5, table.margin.left), "points"))
# define table with Median survival (displayed on the right of the figure)
surv_med <- surv_median(fit)
tbl <- as.data.frame(table(data[[var]]))
tbl$median <- sapply(1:length(surv_med$median),function(x){
paste(surv_med$median[x], " (", surv_med$lower[x],"-", surv_med$upper[x],")", sep = "")
})
rownames(tbl) <- tbl$Var1
tbl$Var1 <- NULL
colnames(tbl) <- c("No. of patients", "Median  (95% CI)")
tblGrob <- gridExtra::tableGrob(tbl, theme = gridExtra::ttheme_minimal())
# add blank plot for arranging
blankPlot <- ggplot()+geom_blank(aes(1,1))+
theme(plot.background = element_blank(), panel.grid.major = element_blank(),  panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank(), axis.title.x = element_blank(),
axis.title.y = element_blank(), axis.text.x = element_blank(),  axis.text.y = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank()
)
# arrange plot, table and text
p1 <- ggpubr::ggarrange(ggsurv$plot, ggsurv$table, ncol = 1, heights = c(3,1))
# p2 <- ggpubr::ggarrange(tblGrob,blankPlot,ggpubr::text_grob(txt), ncol = 2, nrow = 4)
p2 <- ggpubr::ggarrange(tblGrob,blankPlot,  nrow = 2)
ggpubr::ggarrange(p1, p2, ncol = 2, widths = c(2,1))
}
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
rm(list = c("survplot_eumelareg"))
setwd("C:/MBender/Arbeit/Github")
# create("emR")
setwd("./emR")
document()
?survplot_eumelareg
install("emR")
setwd("..")
install("emR")
library(emR)
