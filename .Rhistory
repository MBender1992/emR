save_surv_plot_eumelareg <- function(data,time, status, var,legend.labs=NULL, regID = "REGISTR", registry = "EUMELAREG",path = NULL,...){
LOT <- stringr::str_extract(time, "\\d")
tmp <- stringr::str_extract(status, stringr::fixed(c("PFS","OS"), ignore_case=TRUE))
survival <- tmp[-which(is.na(tmp))]
if (is.null(path)) {
if (!dir.exists(paste("Results/survival_curve/",registry, sep = ""))) {
dir.create(paste("Results/survival_curve/",registry, sep = ""), recursive = TRUE)
}
path <- paste("Results/survival_curve/",registry, sep = "")
}
if (ifelse(is.na(stringr::str_extract(var,"\\d$") != LOT),TRUE, stringr::str_extract(var,"\\d$") != LOT)){
warning("Please check if grouping variable corresponds to the correct line of treatment")
}
if (registry != "EUMELAREG"){
data <-  data[eval(parse(text=regID)) == registry]
data[[var]] <- droplevels(data[[var]])
}
filename <- paste("/survival_curve_",var,"_",registry,"_",survival,LOT,".png", sep = "")
png(paste(path, filename, sep = ""), units="in", width=12, height=6.2, res=600)
if (!is.null(legend.labs)){
t <- try(parse(text = legend.labs), silent = TRUE)
if("try-error" %in% class(t)){
labs <- legend.labs
} else {
labs <- eval(parse(text = legend.labs))
}
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
legend.labs = labs,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
} else {
if(survival == "PFS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,ylab = "Probability of Progression Free Survival",...)
} else if(survival == "OS"){
p <- survplot_eumelareg(data = data, time = time, status = status,
var = var,  ylab = "Probability of Overall Survival",...)
} else {
stop("Please specify type of survival")
}
}
print(p)
dev.off()
}
forestplot_eumelareg <- function (model, data = NULL, main = "Hazard ratio for disease progression or death (95% CI)",
cpositions = c(0.02,   0.22, 0.4),point.size = 3, fontsize = 0.7,line.size = 0.7, legend_x = 0.5, legend_y = 0,
refLabel = "reference", noDigits = 2, varnames = NULL){
conf.high <- conf.low <- estimate <- var <- NULL
stopifnot(inherits(model, "coxph"))
data <- insight::get_data(model, data = data)
terms <- attr(model$terms, "dataClasses")[-1]
coef <- as.data.frame(broom::tidy(model, conf.int = TRUE))
gmodel <- broom::glance(model)
allTerms <- lapply(seq_along(terms), function(i) {
var <- names(terms)[i]
if (terms[i] %in% c("factor", "character")) {
adf <- as.data.frame(table(data[, var]))
cbind(var = var, adf, pos = 1:nrow(adf))
}
else if (terms[i] == "numeric") {
data.frame(var = var, Var1 = "", Freq = nrow(data),
pos = 1)
}
else {
vars = grep(paste0("^", var, "*."), coef$term,
value = TRUE)
data.frame(var = vars, Var1 = "", Freq = nrow(data),
pos = seq_along(vars))
}
})
allTermsDF <- do.call(rbind, allTerms)
colnames(allTermsDF) <- c("var", "level", "N","pos")
inds <- apply(allTermsDF[, 1:2], 1, paste0, collapse = "")
rownames(coef) <- gsub(coef$term, pattern = "`", replacement = "")
toShow <- cbind(allTermsDF, coef[inds, ])[, c("var",
"level", "N", "p.value", "estimate",
"conf.low", "conf.high", "pos")]
if (!is.null(varnames)) toShow$var <- varnames
toShowExp <- toShow[, 5:7]
toShowExp[is.na(toShowExp)] <- 0
toShowExp <- format(exp(toShowExp), digits = noDigits)
toShowExpClean <- data.frame(toShow, pvalue = signif(toShow[,4], noDigits + 1), toShowExp)
toShowExpClean$stars <- paste0(round(toShowExpClean$p.value,
noDigits + 1), " ", ifelse(toShowExpClean$p.value <  0.05, "*", ""),
ifelse(toShowExpClean$p.value <   0.01, "*", ""),
ifelse(toShowExpClean$p.value < 0.001, "*", ""))
toShowExpClean$ci <- paste0("(", toShowExpClean[, "conf.low.1"],
" - ", toShowExpClean[, "conf.high.1"], ")")
toShowExpClean$estimate.1[is.na(toShowExpClean$estimate)] = refLabel
toShowExpClean$stars[which(toShowExpClean$p.value < 0.001)] = "<0.001 ***"
toShowExpClean$stars[is.na(toShowExpClean$estimate)] = ""
toShowExpClean$ci[is.na(toShowExpClean$estimate)] = ""
toShowExpClean$estimate[is.na(toShowExpClean$estimate)] = 0
toShowExpClean$var = as.character(toShowExpClean$var)
toShowExpClean$var[duplicated(toShowExpClean$var)] = ""
toShowExpClean$N <- paste0("(N=", toShowExpClean$N, ")")
toShowExpClean$levelN <- paste(toShowExpClean$level, toShowExpClean$N) #neu
toShowExpClean$estimateCI <- paste(toShowExpClean$estimate.1, toShowExpClean$ci) # neu
toShowExpClean <- toShowExpClean[nrow(toShowExpClean):1,]
toShowExpClean$estimate <- ifelse(toShowExpClean$estimate == 0, NA, toShowExpClean$estimate)
rangeb <- range(toShowExpClean$conf.low, toShowExpClean$conf.high, na.rm = TRUE)
breaks <- grDevices::axisTicks(rangeb/2, log = TRUE, nint = 7)
rangeplot <- rangeb
rangeplot[1] <- rangeplot[1] - diff(rangeb)
rangeplot[2] <- rangeplot[2] + 0.15 * diff(rangeb)
width <- diff(rangeplot)
y_variable <- rangeplot[1] + cpositions[1] * width
y_nlevel <- rangeplot[1] + cpositions[2] * width
y_cistring <- rangeplot[1] + cpositions[3] * width
y_stars <- rangeb[2]
x_annotate <- seq_len(nrow(toShowExpClean))
annot_size_mm <- fontsize * as.numeric(grid::convertX(unit(theme_get()$text$size,"pt"), "mm"))
p <- ggplot(toShowExpClean, aes(seq_along(var), exp(estimate))) +
geom_rect(aes(xmin = seq_along(var) - 0.5, xmax = seq_along(var) +
0.5, ymin = exp(rangeplot[1]), ymax = exp(rangeplot[2]),
fill = ordered(seq_along(var)%%2 + 1))) +
# color of the rectangles
scale_fill_manual(values = c("#FFFFFF33","grey95"), guide = "none") +
# show confidence intervals
geom_errorbar(aes(ymin = exp(conf.low), ymax = exp(conf.high)),size = line.size, width =0) +
# plot mean points
geom_point(pch = 16, size = point.size, color = "#009AA6") +
# add no effect line at 1
geom_hline(yintercept = 1, linetype = 2) +
coord_flip(ylim = exp(rangeplot)) +
ggtitle(main) +
scale_y_log10(name = "", labels = sprintf("%g", breaks), expand = c(0.02, 0.02), breaks = breaks) +
theme_light() +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none",
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5)) +
xlab("") +
annotate(geom = "text", x = x_annotate,
y = exp(y_variable), label = toShowExpClean$var, fontface = "bold",
hjust = 0, size = annot_size_mm) +
annotate(geom = "text", x = x_annotate, y = exp(y_nlevel), hjust = 0, label = toShowExpClean$levelN,
# vjust = -0.1,
size = annot_size_mm) +
# Annotate No. of patients
# annotate(geom = "text", x = x_annotate, y = exp(y_nlevel), label = toShowExpClean$N,
#         fontface = "italic", hjust = 0, vjust = ifelse(toShowExpClean$level == "", 0.5, 1.1), size = annot_size_mm) +
# Annotate mean HR
annotate(geom = "text",  x = x_annotate, y = exp(y_cistring), label = toShowExpClean$estimateCI,
size = annot_size_mm) +
# Annotate ci
# annotate(geom = "text",   x = x_annotate, y = exp(y_cistring), label = toShowExpClean$ci,
#          size = annot_size_mm, vjust = 1.1, fontface = "italic") +
# Annotate stars
annotate(geom = "text", x = x_annotate, y = exp(y_stars),
label = toShowExpClean$stars, size = annot_size_mm,
hjust = -0.2, fontface = "italic") +
annotate(geom = "text", x = legend_x, y = exp(y_variable-legend_y),
label = paste0("# Events: ",   gmodel$nevent, "; Global p-value (Log-Rank): ",
format.pval(gmodel$p.value.log, eps = ".001"),
" \nAIC: ", round(gmodel$AIC, 2), "; Concordance Index: ",
round(gmodel$concordance, 2)), size = annot_size_mm,
hjust = 0, vjust = 1.2, fontface = "italic")
gt <-suppressWarnings(ggplot_gtable(ggplot_build(p)))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
ggpubr::as_ggplot(gt)
}
vec <- "2015-04"
x <- "2015-04"
stringr::str_detect(x, "^\\d{4}$")
stringr::str_detect(x, "^\\d{4}-\\d{2}")
x <- "2015-04-12"
stringr::str_detect(x, "^\\d{4}-\\d{2}")
convert_date <- function(x){
x <- ifelse(stringr::str_detect(x, "^\\d{4}$"), paste(x, "-06", sep = ""), x)
x <- ifelse(stringr::str_detect(x, "^\\d{4}-\\d{2}$"), paste(x, "-15", sep = ""), x)
ymd <- lubridate::ymd(x)
dmy <- lubridate::dmy(x)
dmy[is.na(dmy)] <- ymd[is.na(dmy)]
return(dmy)
}
?sub
library(devtools)
library(roxygen2)
setwd("C:/MBender/Arbeit/Github")
# setwd("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github")
package <- "emR"
# create package
# create(package)
# update package
setwd(paste("./", package, sep = ""))
document()
